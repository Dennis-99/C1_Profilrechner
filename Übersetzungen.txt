D            <Label x:Name="lbl_ProfilauswahlimgD" Content="Bitte wählen Sie ein Profil aus:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontSize="36"/>
E            <Label x:Name="lbl_ProfilauswahlimgE" Content="Select a profile:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontSize="36"/>
F            <Label x:Name="lbl_ProfilauswahlimgF" Content="Veuillez chosir un profil:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontSize="36"/>

D            <Label x:Name="lbl_HoeheD" Content="Höhe" HorizontalAlignment="Left" Margin="10,23,0,0" VerticalAlignment="Top"/>
D            <Label x:Name="lbl_BreiteD" Content="Breite" HorizontalAlignment="Left" Margin="10,82,0,0" VerticalAlignment="Top"/>
D            <Label x:Name="lbl_LaengeD" Content="Länge" HorizontalAlignment="Left" Margin="10,131,0,0" VerticalAlignment="Top"/>
D            <Label x:Name="lbl_WandstaerkeD" Content="Wandstärke" HorizontalAlignment="Left" Margin="10,190,0,0" VerticalAlignment="Top"/>

E            <Label x:Name="lbl_HoeheE" Content="Height" HorizontalAlignment="Left" Margin="10,23,0,0" VerticalAlignment="Top"/>
E            <Label x:Name="lbl_BreiteE" Content="Width" HorizontalAlignment="Left" Margin="10,82,0,0" VerticalAlignment="Top"/>
E            <Label x:Name="lbl_LaengeE" Content="Length" HorizontalAlignment="Left" Margin="10,131,0,0" VerticalAlignment="Top"/>
E            <Label x:Name="lbl_WandstaerkeE" Content="wall thickness" HorizontalAlignment="Left" Margin="10,190,0,0" VerticalAlignment="Top"/>

F            <Label x:Name="lbl_HoeheF" Content="Hauteur" HorizontalAlignment="Left" Margin="10,23,0,0" VerticalAlignment="Top"/>
F            <Label x:Name="lbl_BreiteF" Content="Largeur" HorizontalAlignment="Left" Margin="10,82,0,0" VerticalAlignment="Top"/>
F            <Label x:Name="lbl_LaengeF" Content="Longueur" HorizontalAlignment="Left" Margin="10,131,0,0" VerticalAlignment="Top"/>
F            <Label x:Name="lbl_WandstaerkeF" Content="Épaisseur de paroi" HorizontalAlignment="Left" Margin="10,190,0,0" VerticalAlignment="Top"/>

D            <Button x:Name="btn_BerechnenD" Content="Berechnen" Margin="10,317,0,0" Click="btn_Berechnen_Click" HorizontalAlignment="Left" Width="75" Height="20" VerticalAlignment="Top"/>
E            <Button x:Name="btn_BerechnenE" Content="Calculate" Margin="10,317,0,0" Click="btn_Berechnen_Click" HorizontalAlignment="Left" Width="75" Height="20" VerticalAlignment="Top"/>
F            <Button x:Name="btn_BerechnenF" Content="Calculer" Margin="10,317,0,0" Click="btn_Berechnen_Click" HorizontalAlignment="Left" Width="75" Height="20" VerticalAlignment="Top"/>

D                <TreeViewItem x:Name="tvi_ManuelleEingabeD" Header="Manuelle Eingabe " Height="22" Width="118" MouseLeftButtonUp="Tvi_ManuelleEingabe_MouseLeftButtonUp" />
E                <TreeViewItem x:Name="tvi_ManuelleEingabeE" Header="Manually enter density " Height="22" Width="118" MouseLeftButtonUp="Tvi_ManuelleEingabe_MouseLeftButtonUp" />
F                <TreeViewItem x:Name="tvi_ManuelleEingabeF" Header="Entrer la densité manuellement " Height="22" Width="118" MouseLeftButtonUp="Tvi_ManuelleEingabe_MouseLeftButtonUp" />

D            <Label x:Name="lbl_DichteD" Content="Dichte" HorizontalAlignment="Left" Margin="10,239,0,0" VerticalAlignment="Top"/>
E            <Label x:Name="lbl_DichteE" Content="Density" HorizontalAlignment="Left" Margin="10,239,0,0" VerticalAlignment="Top"/>
F            <Label x:Name="lbl_DichteF" Content="Densité" HorizontalAlignment="Left" Margin="10,239,0,0" VerticalAlignment="Top"/>

Fehler = Erreur (Frz)

D            if (Profilint.Equals(1))
            {
                Querschnitt = HoeheD * BreiteD;
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                Festigkeitx = (BreiteD * Math.Pow(HoeheD, 3)) / 12;
                Festigkeity = (HoeheD * Math.Pow(BreiteD, 3)) / 12;

                lbl_Querschnitt.Content = "Querschnitt: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volumen: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht,3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "FTM";
            }
D            else if (Profilint.Equals(2))
            {
                Querschnitt = (HoeheD * BreiteD) - ((HoeheD - (2 * WandstaerkeD)) * (BreiteD - (2 * WandstaerkeD)));
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                Festigkeitx = ((BreiteD * Math.Pow(HoeheD, 3)) - ((BreiteD - (2 * WandstaerkeD)) * Math.Pow((HoeheD - (2 * WandstaerkeD)), 3))) / 12;
                Festigkeity = ((HoeheD * Math.Pow(BreiteD, 3)) - ((HoeheD - (2 * WandstaerkeD)) * Math.Pow((BreiteD - (2 * WandstaerkeD)), 3))) / 12;

                lbl_Querschnitt.Content = "Querschnitt: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volumen: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "FTM";
            }
D            else if (Profilint.Equals(3))
            {
                Querschnitt = Math.Pow(DurchmesserD, 2) * Math.PI / 4;
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                Festigkeitx = (Math.PI * (Math.Pow(DurchmesserD, 4))) / 64;
                Festigkeity = (Math.PI * (Math.Pow(DurchmesserD, 4))) / 64;

                lbl_Querschnitt.Content = "Querschnitt: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volumen: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "FTM";
            }
D            else if (Profilint.Equals(4))
            {
                Querschnitt = ((Math.Pow(DurchmesserD, 2) * Math.PI) - (Math.Pow((DurchmesserD - (2 * WandstaerkeD)), 2) * Math.PI)) / 4;
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                Festigkeitx = (Math.PI * (Math.Pow(DurchmesserD, 4) - Math.Pow((DurchmesserD - (2 * WandstaerkeD)), 4))) / 64;
                Festigkeity = (Math.PI * (Math.Pow(DurchmesserD, 4) - Math.Pow((DurchmesserD - (2 * WandstaerkeD)), 4))) / 64;

                lbl_Querschnitt.Content = "Querschnitt: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volumen: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "FTM";

            }


D            else if (Profilint.Equals(5))
            {
                Double Breiteb;
                Double Hoeheh;
                //Zwischenrechnung
                Breiteb = BreiteD - StegbreiteD;
                Hoeheh = HoeheD - 2 * FlanschbreiteD;

                Querschnitt = (WandstaerkeD * BreiteD) + (WandstaerkeD * (HoeheD - WandstaerkeD));
                Volumen = (WandstaerkeD * BreiteD * LaengeD) + ((HoeheD - WandstaerkeD) * WandstaerkeD * LaengeD);
                Gewicht = Volumen * DichteD;
                SchwerpunktyD = HoeheD / 2;
                SchwerpunktxD = BreiteD / 2;
                Festigkeitx = (BreiteD * Math.Pow(HoeheD, 3) / 12) - (Breiteb * Math.Pow(Hoeheh, 3) / 12);
                Festigkeity = 2 * ((FlanschbreiteD * Math.Pow(BreiteD, 3) / 12)) + ((Hoeheh * Math.Pow(StegbreiteD, 3)) / 12);

                lbl_Querschnitt.Content = "Querschnitt: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volumen: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "FTM";
                lbl_SWPX.Content = Math.Round(SchwerpunktxD, 3);
                lbl_SWPY.Content = Math.Round(SchwerpunktyD, 3);
                lbl_SWP.Content = "Schwerpunkt";

            }
D            else if (Profilint.Equals(6))
            {
                Querschnitt = (WandstaerkeD * BreiteD) + (WandstaerkeD * (HoeheD - WandstaerkeD));
                Volumen = (WandstaerkeD * BreiteD * LaengeD) + ((HoeheD - WandstaerkeD) * WandstaerkeD * LaengeD);
                Gewicht = Volumen * DichteD;
                SchwerpunktyD = ((WandstaerkeD * (HoeheD - WandstaerkeD)) * ((HoeheD - WandstaerkeD) / 2) + ((WandstaerkeD * BreiteD) * (BreiteD - (WandstaerkeD / 2))))
                                      / ((WandstaerkeD * (HoeheD - WandstaerkeD)) + (BreiteD * WandstaerkeD));
                SchwerpunktxD = BreiteD / 2;
                Festigkeitx = ((WandstaerkeD * Math.Pow((HoeheD - WandstaerkeD), 3)) / 12) + (WandstaerkeD * (HoeheD - WandstaerkeD)) * Math.Pow((SchwerpunktyD - ((HoeheD - WandstaerkeD) / 2)), 2)
               //  +                     Ixx2                     +            A2            *                           l2²
               + ((BreiteD * Math.Pow(WandstaerkeD, 3)) / 12) + (WandstaerkeD * BreiteD) * Math.Pow(((BreiteD - (WandstaerkeD / 2)) - SchwerpunktyD), 2);
                //                               Iyy1                          +                     Iyy2
                Festigkeity = (((HoeheD - WandstaerkeD) * Math.Pow(WandstaerkeD, 3)) / 12) + ((WandstaerkeD * Math.Pow(BreiteD, 3)) / 12);

                lbl_Querschnitt.Content = "Querschnitt: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volumen: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "FTM";
                lbl_SWPX.Content = Math.Round(SchwerpunktxD, 3);
                lbl_SWPY.Content = Math.Round(SchwerpunktyD, 3);
                lbl_SWP.Content = "Schwerpunkt";
            }
D            else if (Profilint.Equals(7))
            {
                Querschnitt = (BreiteD * HoeheD) - ((BreiteD - StegbreiteD) * (HoeheD - (2 * FlanschbreiteD)));
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                SchwerpunktxD = ((BreiteD * HoeheD * (BreiteD / 2)) - ((BreiteD - StegbreiteD) * (HoeheD - (2 * FlanschbreiteD)) * ((BreiteD - StegbreiteD) / 2 + StegbreiteD)))
                                 / ((BreiteD * HoeheD) - ((BreiteD - StegbreiteD) * (HoeheD - (2 * FlanschbreiteD))));
                SchwerpunktyD = HoeheD / 2;
                Festigkeitx = ((BreiteD * Math.Pow(HoeheD, 3)) / 12) - (((BreiteD - StegbreiteD) * Math.Pow((HoeheD - (2 * FlanschbreiteD)), 3)) / 12);
                Festigkeity = ((HoeheD * Math.Pow(BreiteD, 3)) / 12 + ((BreiteD * HoeheD) * Math.Pow(((BreiteD / 2) - SchwerpunktxD), 2)))
                               - (((HoeheD - (2 * FlanschbreiteD)) * Math.Pow((BreiteD - StegbreiteD), 3)) / 12
                               + ((BreiteD - StegbreiteD) * (HoeheD - (2 * FlanschbreiteD))) * Math.Pow((((BreiteD - StegbreiteD) / 2 + StegbreiteD) - SchwerpunktxD), 2));

                lbl_Querschnitt.Content = "Querschnitt: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volumen: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "FTM";
                lbl_SWPX.Content = Math.Round(SchwerpunktxD, 3);
                lbl_SWPY.Content = Math.Round(SchwerpunktyD, 3);
                lbl_SWP.Content = "Schwerpunkt";
            }
D            else if (Profilint.Equals(8))
            {
                Querschnitt = BreiteD * WandstaerkeD + (HoeheD - WandstaerkeD) * WandstaerkeD;
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                SchwerpunktxD = (BreiteD * HoeheD * (BreiteD / 2) - (BreiteD - WandstaerkeD) * (HoeheD - WandstaerkeD) * ((BreiteD - WandstaerkeD) / 2 + WandstaerkeD)) / ((BreiteD * HoeheD) - ((BreiteD - WandstaerkeD) * (HoeheD - WandstaerkeD)));
                SchwerpunktyD = (HoeheD * BreiteD * (HoeheD / 2) - (HoeheD - WandstaerkeD) * (BreiteD - WandstaerkeD) * ((HoeheD - WandstaerkeD) / 2 + WandstaerkeD)) / ((HoeheD * BreiteD) - ((HoeheD - WandstaerkeD) * (BreiteD - WandstaerkeD)));
                Festigkeitx = ((WandstaerkeD * Math.Pow(HoeheD, 3) / 12) + (WandstaerkeD * HoeheD) * Math.Pow((HoeheD / 2 - SchwerpunktyD), 2)) + (((BreiteD - WandstaerkeD) * Math.Pow(WandstaerkeD, 3) / 12) + (((BreiteD - WandstaerkeD) * WandstaerkeD) * Math.Pow((SchwerpunktyD - (WandstaerkeD / 2)), 2)));                                       //Klappt
                Festigkeity = ((HoeheD * Math.Pow(WandstaerkeD, 3) / 12) + (WandstaerkeD * HoeheD) * Math.Pow((SchwerpunktxD - (WandstaerkeD / 2)), 2)) + ((WandstaerkeD * Math.Pow((BreiteD - WandstaerkeD), 3) / 12) + (((BreiteD - WandstaerkeD) * WandstaerkeD) * Math.Pow(((BreiteD - WandstaerkeD) / 2 + WandstaerkeD) - SchwerpunktxD, 2)));      //Klappt

                Festigkeitxy = -Math.Pow((BreiteD * HoeheD), 2) / 4 - (-(Math.Pow((BreiteD * HoeheD), 2) - Math.Pow((HoeheD * WandstaerkeD), 2) - Math.Pow((BreiteD * WandstaerkeD), 2) + Math.Pow(WandstaerkeD, 4)) / 4) + (((BreiteD * HoeheD) - (BreiteD - WandstaerkeD) * (HoeheD - WandstaerkeD)) * SchwerpunktxD * SchwerpunktyD);

                //Achswinkel = (1 / 2) * Math.Atan((2 * Festigkeitxy) / (Festigkeitxx - Festigkeityy));
                AchswinkelRad = (Math.Atan((2 * Festigkeitxy) / (Festigkeitx - Festigkeity))) / 2;
                AchswinkelGrad = AchswinkelRad * 180 / Math.PI;
                TanA = Math.Tan(AchswinkelGrad); 

                Festigkeitu = (Festigkeitx + Festigkeity) / 2 + (((Festigkeitx - Festigkeity) / 2) * Math.Cos(2 * AchswinkelRad)) + Festigkeitxy * Math.Sin(2 * AchswinkelRad);
                Festigkeitv = (Festigkeitx + Festigkeity) / 2 - (((Festigkeitx - Festigkeity) / 2) * Math.Cos(2 * AchswinkelRad)) - Festigkeitxy * Math.Sin(2 * AchswinkelRad);

                lbl_Querschnitt.Content = "Querschnitt: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volumen: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "FTM";
                lbl_SWPX.Content = Math.Round(SchwerpunktxD, 3);
                lbl_SWPY.Content = Math.Round(SchwerpunktyD, 3);
                lbl_SWP.Content = "Schwerpunkt";
                lbl_DeviationsMoment.Content = "Deviationmoment" + Math.Round(Festigkeitxy, 3);
                lbl_Drehwinkel.Content = "Drehwinkel";
                lbl_Grad.Content = Math.Round(AchswinkelGrad, 2);
                lbl_Rad.Content = Math.Round(AchswinkelRad, 2);
                lbl_TanA.Content = Math.Round(TanA, 3);
                lbl_HTM.Content = "Hauptträgheitsmoment";
                lbl_HTMU.Content = Math.Round(Festigkeitu, 3);
                lbl_HTMV.Content = Math.Round(Festigkeitv, 3);
            }
					
					

E			if (Profilint.Equals(1))
            {
                Querschnitt = HoeheD * BreiteD;
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                Festigkeitx = (BreiteD * Math.Pow(HoeheD, 3)) / 12;
                Festigkeity = (HoeheD * Math.Pow(BreiteD, 3)) / 12;

                lbl_Querschnitt.Content = "Cross-section area: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Mass: " + Math.Round(Gewicht,3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Geometrical moment of inertia";
            }
E            else if (Profilint.Equals(2))
            {
                Querschnitt = (HoeheD * BreiteD) - ((HoeheD - (2 * WandstaerkeD)) * (BreiteD - (2 * WandstaerkeD)));
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                Festigkeitx = ((BreiteD * Math.Pow(HoeheD, 3)) - ((BreiteD - (2 * WandstaerkeD)) * Math.Pow((HoeheD - (2 * WandstaerkeD)), 3))) / 12;
                Festigkeity = ((HoeheD * Math.Pow(BreiteD, 3)) - ((HoeheD - (2 * WandstaerkeD)) * Math.Pow((BreiteD - (2 * WandstaerkeD)), 3))) / 12;

                lbl_Querschnitt.Content = "Cross-section area: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Mass: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Geometrical moment of inertia";
            }
E            else if (Profilint.Equals(3))
            {
                Querschnitt = Math.Pow(DurchmesserD, 2) * Math.PI / 4;
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                Festigkeitx = (Math.PI * (Math.Pow(DurchmesserD, 4))) / 64;
                Festigkeity = (Math.PI * (Math.Pow(DurchmesserD, 4))) / 64;

                lbl_Querschnitt.Content = "Cross-section area: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Mass: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Geometrical moment of inertia";
            }
E            else if (Profilint.Equals(4))
            {
                Querschnitt = ((Math.Pow(DurchmesserD, 2) * Math.PI) - (Math.Pow((DurchmesserD - (2 * WandstaerkeD)), 2) * Math.PI)) / 4;
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                Festigkeitx = (Math.PI * (Math.Pow(DurchmesserD, 4) - Math.Pow((DurchmesserD - (2 * WandstaerkeD)), 4))) / 64;
                Festigkeity = (Math.PI * (Math.Pow(DurchmesserD, 4) - Math.Pow((DurchmesserD - (2 * WandstaerkeD)), 4))) / 64;

                lbl_Querschnitt.Content = "Cross-section area: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Mass: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Geometrical moment of inertia";

            }


E            else if (Profilint.Equals(5))
            {
                Double Breiteb;
                Double Hoeheh;
                //Zwischenrechnung
                Breiteb = BreiteD - StegbreiteD;
                Hoeheh = HoeheD - 2 * FlanschbreiteD;

                Querschnitt = (WandstaerkeD * BreiteD) + (WandstaerkeD * (HoeheD - WandstaerkeD));
                Volumen = (WandstaerkeD * BreiteD * LaengeD) + ((HoeheD - WandstaerkeD) * WandstaerkeD * LaengeD);
                Gewicht = Volumen * DichteD;
                SchwerpunktyD = HoeheD / 2;
                SchwerpunktxD = BreiteD / 2;
                Festigkeitx = (BreiteD * Math.Pow(HoeheD, 3) / 12) - (Breiteb * Math.Pow(Hoeheh, 3) / 12);
                Festigkeity = 2 * ((FlanschbreiteD * Math.Pow(BreiteD, 3) / 12)) + ((Hoeheh * Math.Pow(StegbreiteD, 3)) / 12);

                lbl_Querschnitt.Content = "Cross-section area: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Mass: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Geometrical moment of inertia";
                lbl_SWPX.Content = Math.Round(SchwerpunktxD, 3);
                lbl_SWPY.Content = Math.Round(SchwerpunktyD, 3);
                lbl_SWP.Content = "Center of mass";

            }
E            else if (Profilint.Equals(6))
            {
                Querschnitt = (WandstaerkeD * BreiteD) + (WandstaerkeD * (HoeheD - WandstaerkeD));
                Volumen = (WandstaerkeD * BreiteD * LaengeD) + ((HoeheD - WandstaerkeD) * WandstaerkeD * LaengeD);
                Gewicht = Volumen * DichteD;
                SchwerpunktyD = ((WandstaerkeD * (HoeheD - WandstaerkeD)) * ((HoeheD - WandstaerkeD) / 2) + ((WandstaerkeD * BreiteD) * (BreiteD - (WandstaerkeD / 2))))
                                      / ((WandstaerkeD * (HoeheD - WandstaerkeD)) + (BreiteD * WandstaerkeD));
                SchwerpunktxD = BreiteD / 2;
                Festigkeitx = ((WandstaerkeD * Math.Pow((HoeheD - WandstaerkeD), 3)) / 12) + (WandstaerkeD * (HoeheD - WandstaerkeD)) * Math.Pow((SchwerpunktyD - ((HoeheD - WandstaerkeD) / 2)), 2)
               //  +                     Ixx2                     +            A2            *                           l2²
               + ((BreiteD * Math.Pow(WandstaerkeD, 3)) / 12) + (WandstaerkeD * BreiteD) * Math.Pow(((BreiteD - (WandstaerkeD / 2)) - SchwerpunktyD), 2);
                //                               Iyy1                          +                     Iyy2
                Festigkeity = (((HoeheD - WandstaerkeD) * Math.Pow(WandstaerkeD, 3)) / 12) + ((WandstaerkeD * Math.Pow(BreiteD, 3)) / 12);

                lbl_Querschnitt.Content = "Cross-section area: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Mass: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Geometrical moment of inertia";
                lbl_SWPX.Content = Math.Round(SchwerpunktxD, 3);
                lbl_SWPY.Content = Math.Round(SchwerpunktyD, 3);
                lbl_SWP.Content = "Center of mass";
            }
E            else if (Profilint.Equals(7))
            {
                Querschnitt = (BreiteD * HoeheD) - ((BreiteD - StegbreiteD) * (HoeheD - (2 * FlanschbreiteD)));
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                SchwerpunktxD = ((BreiteD * HoeheD * (BreiteD / 2)) - ((BreiteD - StegbreiteD) * (HoeheD - (2 * FlanschbreiteD)) * ((BreiteD - StegbreiteD) / 2 + StegbreiteD)))
                                 / ((BreiteD * HoeheD) - ((BreiteD - StegbreiteD) * (HoeheD - (2 * FlanschbreiteD))));
                SchwerpunktyD = HoeheD / 2;
                Festigkeitx = ((BreiteD * Math.Pow(HoeheD, 3)) / 12) - (((BreiteD - StegbreiteD) * Math.Pow((HoeheD - (2 * FlanschbreiteD)), 3)) / 12);
                Festigkeity = ((HoeheD * Math.Pow(BreiteD, 3)) / 12 + ((BreiteD * HoeheD) * Math.Pow(((BreiteD / 2) - SchwerpunktxD), 2)))
                               - (((HoeheD - (2 * FlanschbreiteD)) * Math.Pow((BreiteD - StegbreiteD), 3)) / 12
                               + ((BreiteD - StegbreiteD) * (HoeheD - (2 * FlanschbreiteD))) * Math.Pow((((BreiteD - StegbreiteD) / 2 + StegbreiteD) - SchwerpunktxD), 2));

                lbl_Querschnitt.Content = "Cross-section area: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Mass: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Geometrical moment of inertia";
                lbl_SWPX.Content = Math.Round(SchwerpunktxD, 3);
                lbl_SWPY.Content = Math.Round(SchwerpunktyD, 3);
                lbl_SWP.Content = "Center of mass";
            }
E            else if (Profilint.Equals(8))
            {
                Querschnitt = BreiteD * WandstaerkeD + (HoeheD - WandstaerkeD) * WandstaerkeD;
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                SchwerpunktxD = (BreiteD * HoeheD * (BreiteD / 2) - (BreiteD - WandstaerkeD) * (HoeheD - WandstaerkeD) * ((BreiteD - WandstaerkeD) / 2 + WandstaerkeD)) / ((BreiteD * HoeheD) - ((BreiteD - WandstaerkeD) * (HoeheD - WandstaerkeD)));
                SchwerpunktyD = (HoeheD * BreiteD * (HoeheD / 2) - (HoeheD - WandstaerkeD) * (BreiteD - WandstaerkeD) * ((HoeheD - WandstaerkeD) / 2 + WandstaerkeD)) / ((HoeheD * BreiteD) - ((HoeheD - WandstaerkeD) * (BreiteD - WandstaerkeD)));
                Festigkeitx = ((WandstaerkeD * Math.Pow(HoeheD, 3) / 12) + (WandstaerkeD * HoeheD) * Math.Pow((HoeheD / 2 - SchwerpunktyD), 2)) + (((BreiteD - WandstaerkeD) * Math.Pow(WandstaerkeD, 3) / 12) + (((BreiteD - WandstaerkeD) * WandstaerkeD) * Math.Pow((SchwerpunktyD - (WandstaerkeD / 2)), 2)));                                       //Klappt
                Festigkeity = ((HoeheD * Math.Pow(WandstaerkeD, 3) / 12) + (WandstaerkeD * HoeheD) * Math.Pow((SchwerpunktxD - (WandstaerkeD / 2)), 2)) + ((WandstaerkeD * Math.Pow((BreiteD - WandstaerkeD), 3) / 12) + (((BreiteD - WandstaerkeD) * WandstaerkeD) * Math.Pow(((BreiteD - WandstaerkeD) / 2 + WandstaerkeD) - SchwerpunktxD, 2)));      //Klappt

                Festigkeitxy = -Math.Pow((BreiteD * HoeheD), 2) / 4 - (-(Math.Pow((BreiteD * HoeheD), 2) - Math.Pow((HoeheD * WandstaerkeD), 2) - Math.Pow((BreiteD * WandstaerkeD), 2) + Math.Pow(WandstaerkeD, 4)) / 4) + (((BreiteD * HoeheD) - (BreiteD - WandstaerkeD) * (HoeheD - WandstaerkeD)) * SchwerpunktxD * SchwerpunktyD);

                //Achswinkel = (1 / 2) * Math.Atan((2 * Festigkeitxy) / (Festigkeitxx - Festigkeityy));
                AchswinkelRad = (Math.Atan((2 * Festigkeitxy) / (Festigkeitx - Festigkeity))) / 2;
                AchswinkelGrad = AchswinkelRad * 180 / Math.PI;
                TanA = Math.Tan(AchswinkelGrad); 

                Festigkeitu = (Festigkeitx + Festigkeity) / 2 + (((Festigkeitx - Festigkeity) / 2) * Math.Cos(2 * AchswinkelRad)) + Festigkeitxy * Math.Sin(2 * AchswinkelRad);
                Festigkeitv = (Festigkeitx + Festigkeity) / 2 - (((Festigkeitx - Festigkeity) / 2) * Math.Cos(2 * AchswinkelRad)) - Festigkeitxy * Math.Sin(2 * AchswinkelRad);

                lbl_Querschnitt.Content = "Cross-section area: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Mass: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Geometrical moment of inertia";
                lbl_SWPX.Content = Math.Round(SchwerpunktxD, 3);
                lbl_SWPY.Content = Math.Round(SchwerpunktyD, 3);
                lbl_SWP.Content = "Center of mass";
                lbl_DeviationsMoment.Content = "Moment of deviation" + Math.Round(Festigkeitxy, 3);
                lbl_Drehwinkel.Content = "Angle of rotation";
                lbl_Grad.Content = Math.Round(AchswinkelGrad, 2);
                lbl_Rad.Content = Math.Round(AchswinkelRad, 2);
                lbl_TanA.Content = Math.Round(TanA, 3);
                lbl_HTM.Content = "Pricipal moment of inertia";
                lbl_HTMU.Content = Math.Round(Festigkeitu, 3);
                lbl_HTMV.Content = Math.Round(Festigkeitv, 3);
            }



F			if (Profilint.Equals(1))
            {
                Querschnitt = HoeheD * BreiteD;
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                Festigkeitx = (BreiteD * Math.Pow(HoeheD, 3)) / 12;
                Festigkeity = (HoeheD * Math.Pow(BreiteD, 3)) / 12;

                lbl_Querschnitt.Content = "Section transversale: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht,3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Moment quadratique";
            }
F            else if (Profilint.Equals(2))
            {
                Querschnitt = (HoeheD * BreiteD) - ((HoeheD - (2 * WandstaerkeD)) * (BreiteD - (2 * WandstaerkeD)));
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                Festigkeitx = ((BreiteD * Math.Pow(HoeheD, 3)) - ((BreiteD - (2 * WandstaerkeD)) * Math.Pow((HoeheD - (2 * WandstaerkeD)), 3))) / 12;
                Festigkeity = ((HoeheD * Math.Pow(BreiteD, 3)) - ((HoeheD - (2 * WandstaerkeD)) * Math.Pow((BreiteD - (2 * WandstaerkeD)), 3))) / 12;

                lbl_Querschnitt.Content = "Section transversale: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Moment quadratique";
            }
F            else if (Profilint.Equals(3))
            {
                Querschnitt = Math.Pow(DurchmesserD, 2) * Math.PI / 4;
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                Festigkeitx = (Math.PI * (Math.Pow(DurchmesserD, 4))) / 64;
                Festigkeity = (Math.PI * (Math.Pow(DurchmesserD, 4))) / 64;

                lbl_Querschnitt.Content = "Section transversale: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Moment quadratique";
            }
F            else if (Profilint.Equals(4))
            {
                Querschnitt = ((Math.Pow(DurchmesserD, 2) * Math.PI) - (Math.Pow((DurchmesserD - (2 * WandstaerkeD)), 2) * Math.PI)) / 4;
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                Festigkeitx = (Math.PI * (Math.Pow(DurchmesserD, 4) - Math.Pow((DurchmesserD - (2 * WandstaerkeD)), 4))) / 64;
                Festigkeity = (Math.PI * (Math.Pow(DurchmesserD, 4) - Math.Pow((DurchmesserD - (2 * WandstaerkeD)), 4))) / 64;

                lbl_Querschnitt.Content = "Section transversale: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Moment quadratique";

            }


F            else if (Profilint.Equals(5))
            {
                Double Breiteb;
                Double Hoeheh;
                //Zwischenrechnung
                Breiteb = BreiteD - StegbreiteD;
                Hoeheh = HoeheD - 2 * FlanschbreiteD;

                Querschnitt = (WandstaerkeD * BreiteD) + (WandstaerkeD * (HoeheD - WandstaerkeD));
                Volumen = (WandstaerkeD * BreiteD * LaengeD) + ((HoeheD - WandstaerkeD) * WandstaerkeD * LaengeD);
                Gewicht = Volumen * DichteD;
                SchwerpunktyD = HoeheD / 2;
                SchwerpunktxD = BreiteD / 2;
                Festigkeitx = (BreiteD * Math.Pow(HoeheD, 3) / 12) - (Breiteb * Math.Pow(Hoeheh, 3) / 12);
                Festigkeity = 2 * ((FlanschbreiteD * Math.Pow(BreiteD, 3) / 12)) + ((Hoeheh * Math.Pow(StegbreiteD, 3)) / 12);

                lbl_Querschnitt.Content = "Section transversale: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Moment quadratique";
                lbl_SWPX.Content = Math.Round(SchwerpunktxD, 3);
                lbl_SWPY.Content = Math.Round(SchwerpunktyD, 3);
                lbl_SWP.Content = "Centre de masse";

            }
F            else if (Profilint.Equals(6))
            {
                Querschnitt = (WandstaerkeD * BreiteD) + (WandstaerkeD * (HoeheD - WandstaerkeD));
                Volumen = (WandstaerkeD * BreiteD * LaengeD) + ((HoeheD - WandstaerkeD) * WandstaerkeD * LaengeD);
                Gewicht = Volumen * DichteD;
                SchwerpunktyD = ((WandstaerkeD * (HoeheD - WandstaerkeD)) * ((HoeheD - WandstaerkeD) / 2) + ((WandstaerkeD * BreiteD) * (BreiteD - (WandstaerkeD / 2))))
                                      / ((WandstaerkeD * (HoeheD - WandstaerkeD)) + (BreiteD * WandstaerkeD));
                SchwerpunktxD = BreiteD / 2;
                Festigkeitx = ((WandstaerkeD * Math.Pow((HoeheD - WandstaerkeD), 3)) / 12) + (WandstaerkeD * (HoeheD - WandstaerkeD)) * Math.Pow((SchwerpunktyD - ((HoeheD - WandstaerkeD) / 2)), 2)
               //  +                     Ixx2                     +            A2            *                           l2²
               + ((BreiteD * Math.Pow(WandstaerkeD, 3)) / 12) + (WandstaerkeD * BreiteD) * Math.Pow(((BreiteD - (WandstaerkeD / 2)) - SchwerpunktyD), 2);
                //                               Iyy1                          +                     Iyy2
                Festigkeity = (((HoeheD - WandstaerkeD) * Math.Pow(WandstaerkeD, 3)) / 12) + ((WandstaerkeD * Math.Pow(BreiteD, 3)) / 12);

                lbl_Querschnitt.Content = "Section transversale: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Moment quadratique";
                lbl_SWPX.Content = Math.Round(SchwerpunktxD, 3);
                lbl_SWPY.Content = Math.Round(SchwerpunktyD, 3);
                lbl_SWP.Content = "Centre de masse";
            }
F            else if (Profilint.Equals(7))
            {
                Querschnitt = (BreiteD * HoeheD) - ((BreiteD - StegbreiteD) * (HoeheD - (2 * FlanschbreiteD)));
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                SchwerpunktxD = ((BreiteD * HoeheD * (BreiteD / 2)) - ((BreiteD - StegbreiteD) * (HoeheD - (2 * FlanschbreiteD)) * ((BreiteD - StegbreiteD) / 2 + StegbreiteD)))
                                 / ((BreiteD * HoeheD) - ((BreiteD - StegbreiteD) * (HoeheD - (2 * FlanschbreiteD))));
                SchwerpunktyD = HoeheD / 2;
                Festigkeitx = ((BreiteD * Math.Pow(HoeheD, 3)) / 12) - (((BreiteD - StegbreiteD) * Math.Pow((HoeheD - (2 * FlanschbreiteD)), 3)) / 12);
                Festigkeity = ((HoeheD * Math.Pow(BreiteD, 3)) / 12 + ((BreiteD * HoeheD) * Math.Pow(((BreiteD / 2) - SchwerpunktxD), 2)))
                               - (((HoeheD - (2 * FlanschbreiteD)) * Math.Pow((BreiteD - StegbreiteD), 3)) / 12
                               + ((BreiteD - StegbreiteD) * (HoeheD - (2 * FlanschbreiteD))) * Math.Pow((((BreiteD - StegbreiteD) / 2 + StegbreiteD) - SchwerpunktxD), 2));

                lbl_Querschnitt.Content = "Section transversale: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Moment quadratique";
                lbl_SWPX.Content = Math.Round(SchwerpunktxD, 3);
                lbl_SWPY.Content = Math.Round(SchwerpunktyD, 3);
                lbl_SWP.Content = "Centre de masse";
            }
F            else if (Profilint.Equals(8))
            {
                Querschnitt = BreiteD * WandstaerkeD + (HoeheD - WandstaerkeD) * WandstaerkeD;
                Volumen = Querschnitt * LaengeD;
                Gewicht = Volumen * DichteD;
                SchwerpunktxD = (BreiteD * HoeheD * (BreiteD / 2) - (BreiteD - WandstaerkeD) * (HoeheD - WandstaerkeD) * ((BreiteD - WandstaerkeD) / 2 + WandstaerkeD)) / ((BreiteD * HoeheD) - ((BreiteD - WandstaerkeD) * (HoeheD - WandstaerkeD)));
                SchwerpunktyD = (HoeheD * BreiteD * (HoeheD / 2) - (HoeheD - WandstaerkeD) * (BreiteD - WandstaerkeD) * ((HoeheD - WandstaerkeD) / 2 + WandstaerkeD)) / ((HoeheD * BreiteD) - ((HoeheD - WandstaerkeD) * (BreiteD - WandstaerkeD)));
                Festigkeitx = ((WandstaerkeD * Math.Pow(HoeheD, 3) / 12) + (WandstaerkeD * HoeheD) * Math.Pow((HoeheD / 2 - SchwerpunktyD), 2)) + (((BreiteD - WandstaerkeD) * Math.Pow(WandstaerkeD, 3) / 12) + (((BreiteD - WandstaerkeD) * WandstaerkeD) * Math.Pow((SchwerpunktyD - (WandstaerkeD / 2)), 2)));                                       //Klappt
                Festigkeity = ((HoeheD * Math.Pow(WandstaerkeD, 3) / 12) + (WandstaerkeD * HoeheD) * Math.Pow((SchwerpunktxD - (WandstaerkeD / 2)), 2)) + ((WandstaerkeD * Math.Pow((BreiteD - WandstaerkeD), 3) / 12) + (((BreiteD - WandstaerkeD) * WandstaerkeD) * Math.Pow(((BreiteD - WandstaerkeD) / 2 + WandstaerkeD) - SchwerpunktxD, 2)));      //Klappt

                Festigkeitxy = -Math.Pow((BreiteD * HoeheD), 2) / 4 - (-(Math.Pow((BreiteD * HoeheD), 2) - Math.Pow((HoeheD * WandstaerkeD), 2) - Math.Pow((BreiteD * WandstaerkeD), 2) + Math.Pow(WandstaerkeD, 4)) / 4) + (((BreiteD * HoeheD) - (BreiteD - WandstaerkeD) * (HoeheD - WandstaerkeD)) * SchwerpunktxD * SchwerpunktyD);

                //Achswinkel = (1 / 2) * Math.Atan((2 * Festigkeitxy) / (Festigkeitxx - Festigkeityy));
                AchswinkelRad = (Math.Atan((2 * Festigkeitxy) / (Festigkeitx - Festigkeity))) / 2;
                AchswinkelGrad = AchswinkelRad * 180 / Math.PI;
                TanA = Math.Tan(AchswinkelGrad); 

                Festigkeitu = (Festigkeitx + Festigkeity) / 2 + (((Festigkeitx - Festigkeity) / 2) * Math.Cos(2 * AchswinkelRad)) + Festigkeitxy * Math.Sin(2 * AchswinkelRad);
                Festigkeitv = (Festigkeitx + Festigkeity) / 2 - (((Festigkeitx - Festigkeity) / 2) * Math.Cos(2 * AchswinkelRad)) - Festigkeitxy * Math.Sin(2 * AchswinkelRad);

                lbl_Querschnitt.Content = "Section transversale: " + Math.Round(Querschnitt, 3) + "mm";
                lbl_Voulumen.Content = "Volume: " + Math.Round(Volumen, 3);
                lbl_Masse.Content = "Masse: " + Math.Round(Gewicht, 3);
                lbl_FTMX.Content = Math.Round(Festigkeitx, 3);
                lbl_FTMY.Content = Math.Round(Festigkeity, 3);
                lbl_FTM.Content = "Moment quadratique";
                lbl_SWPX.Content = Math.Round(SchwerpunktxD, 3);
                lbl_SWPY.Content = Math.Round(SchwerpunktyD, 3);
                lbl_SWP.Content = "Centre de masse";
                lbl_DeviationsMoment.Content = "Moment d'inerte" + Math.Round(Festigkeitxy, 3);
                lbl_Drehwinkel.Content = "Angle de rotation";
                lbl_Grad.Content = Math.Round(AchswinkelGrad, 2);
                lbl_Rad.Content = Math.Round(AchswinkelRad, 2);
                lbl_TanA.Content = Math.Round(TanA, 3);
                lbl_HTM.Content = "Moment d'inerte principal";
                lbl_HTMU.Content = Math.Round(Festigkeitu, 3);
                lbl_HTMV.Content = Math.Round(Festigkeitv, 3);
            }


Fehlermeldungen:
FehlerEingabe: "Bitte geben Sie nur positive Zahlen ein."
"Only enter positive numbers."
"Veuillez seulement entrer des nombres positivs."


FehlerWandBreite: "Bitte stellen Sie eine Wandstärke ein, die geirnger als die halbe Breite ist."
"Enter a wall thickness, that is less than half the witdth."
"Veuillez seulement entrer des épaisseurs des parois moins que demi de la largeur."


FehlerWandHöhe: "Bitte stellen Sie eine Wandstärke ein, die geirnger als die halbe Hoehe ist."
"Enter a wall thickness, that is less than half the height."
"Veuillez seulement entrer des épaisseurs des parois moins que demi de la hauteur."

FehlerWandDurchmesser: "Bitte stellen Sie eine Wandstärke ein, die geirnger als der Radius ist."
"Enter a wall thickness, that is less than the radius."
"Veuillez seulement entrer des épaisseurs des parois moins que le radius."

FehlerSteg: "Bitte stellen Sie eine Stegbreite ein, die geirnger als die Breite ist."
"Enter a web width, that is less than the witdth."
"Veuillez seulement entrer des largeurs des bandes moins quela largeur."

FehlerFlanschIUZ: "Bitte stellen Sie eine Flanschbreite ein, die geirnger als die halbe Hoehe ist."
"Enter a flange width, that is less than half the height."
"Veuillez seulement entrer des largeurs de brides moins que demi de la hauteur."


FehlerFlanschTL: "Bitte stellen Sie eine Flanschbreite ein, die geirnger als die Hoehe ist."
"Enter a flange width, that is less than the height."
"Veuillez seulement entrer des largeurs des brides moins que la hauteur"

Programmfehler:
FehlerProgramm: "Unserem Programm scheint ein Fehler unterlaufen zu sein, es wird sich nun beenden."
"Our program seems to have run into some ishues, it will shut down now" 
"Notre programme a eu un erreur et va arrêter maintenant"
